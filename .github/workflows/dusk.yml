name: Dusk

on:
  pull_request:
    branches:
      - main
jobs:
  dusk-php:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: [ 8.1 ]

    steps:
      - uses: actions/checkout@v2

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}

      - name: Testing PHP version
        run: php -v

      - uses: zhulik/redis-action@1.1.0
        with:
          redis version: '5'
          number of databases: 100

      - name: Prepare The Environment
        run: cp .env.example .env

      - name: Create Database
        run: |
          sudo systemctl start mysql
          mysql --user="root" --password="root" -e "CREATE DATABASE template_test_db character set UTF8mb4 collate utf8mb4_bin;"

      - name: Install Dependencies
        run: |
          composer clear-cache
          composer config "http-basic.nova.laravel.com" "${{ secrets.NOVA_USERNAME }}" "${{ secrets.NOVA_PASSWORD }}"
          composer install --no-ansi --no-interaction --no-scripts --prefer-dist

      - name: Generate Application Key
        run: php artisan key:generate

      - name: Upgrade Chrome Driver
        run: php artisan dusk:chrome-driver `/opt/google/chrome/chrome --version | cut -d " " -f3 | cut -d "." -f1`

      - name: Start Chrome Driver
        run: ./vendor/laravel/dusk/bin/chromedriver-linux &

      - name: Run Laravel Server
        env:
          APP_URL: "http://127.0.0.1:8000"
          CLIENT_DOMAIN_NAME: "http://127.0.0.1:8000"
          PORTAL_URL: "http://localhost:5000"
          WEBSITE_URL: "http://localhost:8000"
          IS_DUSK_TEST: "1"
          SEGMENT_KEY: ${{ secrets.SEGMENT_KEY }}
          STRIPE_KEY: ${{ secrets.STRIPE_KEY }}
          STRIPE_SECRET: ${{ secrets.STRIPE_SECRET }}
          SIGN_REQUEST_TOKEN: ${{ secrets.SIGN_REQUEST_TOKEN }}
          SIGN_REQUEST_SUBDOMAIN: ${{ secrets.SIGN_REQUEST_SUBDOMAIN }}
          SIGN_REQUEST_FROM: ${{ secrets.SIGN_REQUEST_FROM }}
        run: php artisan serve --no-reload &

      - name: Cache Puppeteer
        id: cache-puppeteer
        uses: actions/cache@v2
        with:
          path: node_modules
          key: puppeteer-${{ hashFiles('package-lock.json') }}

      - name: Cache FE Node Modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: frontend/node_modules
          key: node-modules-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install puppeteer
        if: steps.cache-puppeteer.outputs.cache-hit != 'true'
        run: npm install puppeteer

      - name: Install frontend
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          cd frontend/
          sudo apt install nasm
          npm install

      - name: Start frontend
        run: |
          cd frontend
          npm run testing
          (npm run serve&)

      - name: Run Dusk Tests
        env:
          APP_URL: "http://127.0.0.1:8000"
          PORTAL_URL: "http://localhost:5000"
        run: php artisan dusk --process-isolation --group ${{matrix.group}}

      - name: Upload Screenshots
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: screenshots
          path: tests/Browser/screenshots

      - name: Upload Console Logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: console
          path: tests/Browser/console

      - name: Upload Server Logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: server
          path: storage/logs
